---
description: 
globs: 
alwaysApply: true
---
You are an expert in TypeScript, React Native, Expo, and Mobile App Development.

Code Style and Structure:  
- Write concise, type-safe TypeScript code.  
- Use functional components and hooks over class components.  
- Always prefer function-based components instead of class-based components.  
- Ensure components are modular, reusable, and maintainable.  
- Organize files by feature, grouping related components, hooks, and styles.  
- Use NativeWind (Tailwind CSS for React Native) alongside `StyleSheet.create()` for responsive, theme-aware UIs.  
- Match the existing UI patterns and implement light/dark theme switching using theme context/providers.  

Naming Conventions:  
- Use camelCase for variable and function names (e.g., `isFetchingData`, `handleUserInput`).  
- Use PascalCase for component names (e.g., `UserProfile`, `ChatScreen`).  
- Directory names should be lowercase and hyphenated (e.g., `user-profile`, `chat-screen`).  

TypeScript Usage:  
- Use TypeScript for all components, favoring interfaces for props and state.  
- Enable strict typing in `tsconfig.json`.  
- Avoid using `any`; strive for precise types.  
- Utilize `React.FC` for defining functional components with props.  

Performance Optimization:  
- Minimize `useEffect`, `useState`, and heavy computations inside render methods.  
- Use `React.memo()`, `useMemo`, and `useCallback` to prevent unnecessary re-renders.  
- Optimize FlatLists with props like `removeClippedSubviews`, `maxToRenderPerBatch`, and `windowSize`.  
- Use `getItemLayout` for FlatLists when items have a consistent size to improve performance.  
- Avoid anonymous functions in `renderItem` or event handlers to prevent re-renders.  
- Prioritize caching and implement lazy loading (e.g., `FlashList`).  

State Management and Caching:  
- Implement Zustand for managing global state efficiently.  
- Use persist middleware when necessary for caching user-related data.  
- Avoid prop drilling by storing frequently accessed data in Zustand.  
- Ensure that state updates are optimized to avoid unnecessary renders.  

Error Handling and Robust Error Management:  
- Implement centralized error handling using an error boundary component.  
- Use `try/catch` blocks for API calls and async functions.  
- Display user-friendly error messages instead of raw errors.  
- Implement automatic retries for transient errors (e.g., network failures) using libraries like `react-query` or custom retry logic.  
- Log errors using tools like Sentry or Firebase Crashlytics for better debugging.  
- Ensure error boundaries prevent the app from crashing unexpectedly.  

Environment and Terminal Usage:  
- You are using Windows and the PowerShell terminal.  
- Always provide commands that are compatible with PowerShell.  
- Avoid using Linux/macOS-specific commands unless explicitly requested.  
- Ensure all setup instructions and scripts are Windows-friendly.  

UI and Styling:  
- Use consistent styling via `StyleSheet.create()` and NativeWind for dynamic responsiveness.  
- Ensure responsive design by considering different screen sizes and orientations.  
- Handle platform-specific status bars using `<StatusBar />` with theme-aware `barStyle` (e.g., `light-content`/`dark-content`).  
- Optimize image handling using libraries like `react-native-fast-image`.  

Best Practices:  
- Follow React Native's threading model to ensure smooth UI performance.  
- Utilize Expo's EAS Build, Updates, and Expo-supported libraries exclusively unless explicitly allowed.  
- Use Expo-Router for navigation instead of React Navigation.  
- For database changes (schema updates, new tables), append raw SQL/queries at the end of responses for manual execution.  
- In Plan Mode: Analyze codebase and generate a feature plan without editing code.  
- In Design Mode: Focus purely on frontend (UI/UX) with modern, sleek interactions; ignore backend logic.  
- Documentation:  
  - For every code change/feature (e.g., Live Tracking, Notifications), check for a `cursorUpdates` directory in the root. Create it if missing.  
  - Generate/update `{feature-name}.md` files under `cursorUpdates/` with:  
    - Point-wise implementation details  
    - Affected components/hooks  
    - Styling/navigation changes  
    - Performance optimizations  
  - Append this markdown at the end of every response after all implementations.