name: CI/CD for Eagle-Notifier IIS Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.5.0'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Generate Prisma Client
        run: |
          cd backend
          npx prisma generate

      - name: Build TypeScript
        run: |
          cd backend
          npm run build

      - name: Install production dependencies
        run: |
          cd backend
          npm ci --omit=dev --ignore-scripts

      - name: Copy Prisma client to dist
        run: |
          cd backend
          cp -r src/generated/prisma-client dist/src/generated/

      - name: Create deployment package
        run: |
          cd backend
          mkdir -p deployment-package
          cp -r dist prisma node_modules package.json web.config.template deployment-package/

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: eagle-notifier-deployment
          path: backend/deployment-package/
          retention-days: 1

  deploy:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: eagle-notifier-deployment
          path: C:\temp\eagle-notifier-deployment

      - name: Stop IIS Application Pool
        run: |
          Import-Module WebAdministration
          if (Get-WebAppPoolState -Name "EagleNotifierPool" -ErrorAction SilentlyContinue) {
              Stop-WebAppPool -Name "EagleNotifierPool"
              while ((Get-WebAppPoolState -Name "EagleNotifierPool").Value -ne "Stopped") {
                  Start-Sleep -Seconds 2
              }
              Write-Host "Application pool stopped successfully"
          }
        shell: powershell

      - name: Backup current deployment
        run: |
          $deployPath = "C:\inetpub\wwwroot\eagle-notifier"
          $backupPath = "C:\backups\eagle-notifier-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
          if (Test-Path $deployPath) {
              New-Item -ItemType Directory -Path (Split-Path $backupPath) -Force
              Copy-Item -Path $deployPath -Destination $backupPath -Recurse -Force
              Write-Host "Backup created at: $backupPath"
          }
        shell: powershell

      - name: Deploy application files
        run: |
          $sourcePath = "C:\temp\eagle-notifier-deployment"
          $deployPath = "C:\inetpub\wwwroot\eagle-notifier"
          if (Test-Path $deployPath) {
              Remove-Item -Path $deployPath -Recurse -Force
          }
          New-Item -ItemType Directory -Path $deployPath -Force
          Copy-Item -Path "$sourcePath\*" -Destination $deployPath -Recurse -Force
          Rename-Item -Path "$deployPath\web.config.template" -NewName "web.config"
          New-Item -ItemType Directory -Path "$deployPath\logs" -Force
          $acl = Get-Acl $deployPath
          $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("IIS_IUSRS", "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow")
          $acl.SetAccessRule($accessRule)
          Set-Acl -Path $deployPath -AclObject $acl
          Write-Host "Application deployed successfully"
        shell: powershell

      - name: Start IIS Application Pool
        run: |
          Import-Module WebAdministration
          Start-WebAppPool -Name "EagleNotifierPool"
          while ((Get-WebAppPoolState -Name "EagleNotifierPool").Value -ne "Started") {
              Start-Sleep -Seconds 2
          }
          Write-Host "Application pool started successfully"
        shell: powershell

      - name: Health Check
        run: |
          $maxAttempts = 10
          $attempt = 0
          $healthUrl = "http://localhost/eagle-notifier/health"
          do {
              $attempt++
              try {
                  $response = Invoke-WebRequest -Uri $healthUrl -UseBasicParsing -TimeoutSec 10
                  if ($response.StatusCode -eq 200) {
                      Write-Host "Health check passed on attempt $attempt"
                      $healthData = $response.Content | ConvertFrom-Json
                      Write-Host "Application Status: $($healthData.status)"
                      Write-Host "Environment: $($healthData.environment)"
                      exit 0
                  }
              } catch {
                  Write-Host "Health check failed on attempt $attempt`: $($_.Exception.Message)"
              }
              if ($attempt -lt $maxAttempts) {
                  Start-Sleep -Seconds 10
              }
          } while ($attempt -lt $maxAttempts)
          Write-Host "Health check failed after $maxAttempts attempts"
          exit 1
        shell: powershell