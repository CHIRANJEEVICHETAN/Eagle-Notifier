// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OPERATOR
  ADMIN
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String
  name            String
  role            UserRole  @default(OPERATOR)
  avatar          String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  acknowledgedAlarms Alarm[] @relation("AcknowledgedBy")
  resolvedAlarms  Alarm[]   @relation("ResolvedBy")
  acknowledgedHistoryAlarms AlarmHistory[] @relation("AcknowledgedBy")
  resolvedHistoryAlarms AlarmHistory[] @relation("ResolvedBy")
  notifications   Notification[]
  reports         MeterReport[]
  pushToken       String?
  notificationSettings NotificationSettings?
}

enum AlarmType {
  TEMPERATURE
  LEVEL
  PRESSURE
  MOTOR
  CONVEYOR
  FAN
  HEATER
  CARBON
  OIL
}

enum Zone {
  ZONE1
  ZONE2
}

enum AlarmSeverity {
  CRITICAL
  WARNING
  INFO
}

enum AlarmStatus {
  ACTIVE
  ACKNOWLEDGED
  RESOLVED
}

enum NotificationType {
  ALARM
  SYSTEM
  MAINTENANCE
  INFO
}

enum NotificationPriority {
  HIGH
  MEDIUM
  LOW
}

model Notification {
  id              String              @id @default(uuid())
  userId          String
  user            User                @relation(fields: [userId], references: [id])
  title           String
  body            String
  type            NotificationType
  priority        NotificationPriority @default(MEDIUM)
  isRead          Boolean             @default(false)
  metadata        Json?
  createdAt       DateTime            @default(now())
  readAt          DateTime?
}

model NotificationSettings {
  id              String    @id @default(uuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  pushEnabled     Boolean   @default(true)
  emailEnabled    Boolean   @default(false)
  criticalOnly    Boolean   @default(false)
  muteFrom        Int?      // Hour to start muting (0-23)
  muteTo          Int?      // Hour to end muting (0-23)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Alarm {
  id              String        @id @default(uuid())
  description     String
  type            AlarmType
  zone            Zone?
  severity        AlarmSeverity
  status          AlarmStatus   @default(ACTIVE)
  value           String
  setPoint        String
  unit            String?
  lowLimit        Float?
  highLimit       Float?
  notes           String?
  timestamp       DateTime      @default(now())
  acknowledgedById String?
  acknowledgedBy  User?         @relation("AcknowledgedBy", fields: [acknowledgedById], references: [id])
  acknowledgedAt  DateTime?
  resolvedById    String?
  resolvedBy      User?         @relation("ResolvedBy", fields: [resolvedById], references: [id])
  resolvedAt      DateTime?
  resolutionMessage String?     @db.Text
  history         AlarmHistory[]
}

model AlarmHistory {
  id              String        @id @default(uuid())
  alarmId         String
  alarm           Alarm         @relation(fields: [alarmId], references: [id])
  description     String
  type            AlarmType
  severity        AlarmSeverity
  status          AlarmStatus
  value           String
  setPoint        String
  timestamp       DateTime      @default(now())
  acknowledgedById String?
  acknowledgedBy  User?         @relation("AcknowledgedBy", fields: [acknowledgedById], references: [id])
  acknowledgedAt  DateTime?
  resolvedById    String?
  resolvedBy      User?         @relation("ResolvedBy", fields: [resolvedById], references: [id])
  resolvedAt      DateTime?
  resolutionMessage String?     @db.Text
}

model Setpoint {
  id            String   @id @default(cuid())
  name          String
  type          String
  zone          String?
  scadaField    String   // Field name in SCADA database (e.g., "hz1sv")
  lowDeviation  Float
  highDeviation Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SystemSettings {
  id              String    @id @default(uuid())
  maintenanceMode Boolean   @default(false)
  enabledBy       String?
  enabledAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Model to store limits for meter readings
model MeterLimit {
  id              String    @id @default(cuid())
  parameter       String    // voltage, current, frequency, pf, energy, power
  description     String
  unit            String
  highLimit       Float     // Upper threshold that triggers notifications
  lowLimit        Float?    // Optional lower threshold
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String?
  updatedById     String?

  @@unique([parameter])
}

// Model to store generated meter reports
model MeterReport {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  title           String
  format          String    // "excel", "pdf", etc
  fileContent     Bytes     // Store the file content in bytea format
  fileName        String
  fileSize        Int
  startDate       DateTime
  endDate         DateTime
  parameters      String[]  // Array of parameters included in report
  createdAt       DateTime  @default(now())
  metadata        Json?
} 